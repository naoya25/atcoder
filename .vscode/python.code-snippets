{
  "tmp": {
    "prefix": "tmp",
    "body": [
      "def main():",
      "    return",
      "",
      "",
      "if __name__ == \"__main__\":",
      "    main()",
      ""
    ],
    "description": ""
  },
  "i": {
    "prefix": "i",
    "body": ["input()"],
    "description": ""
  },
  "ii": {
    "prefix": "ii",
    "body": ["int(input())"],
    "description": ""
  },
  "mi": {
    "prefix": "mi",
    "body": ["map(int, input().split())"],
    "description": ""
  },
  "li": {
    "prefix": "li",
    "body": ["list(map(int, input().split()))"],
    "description": ""
  },
  "ls": {
    "prefix": "ls",
    "body": ["list(input())"],
    "description": ""
  },
  "lss": {
    "prefix": "lss",
    "body": ["list(input().split())"],
    "description": ""
  },
  "rs": {
    "prefix": "rs",
    "body": ["[list(input()) for _ in range(n)]"],
    "description": ""
  },
  "lli": {
    "prefix": "lli",
    "body": ["[list(map(int, input().split())) for _ in range(n)]"],
    "description": ""
  },
  "fli": {
    "prefix": "fli",
    "body": ["sum([list(map(int, input().split())) for _ in range(n)], [])"],
    "description": ""
  },
  "pn": {
    "prefix": "pn",
    "body": ["print(*x, sep=\"\\n\")"],
    "description": ""
  },
  "inf": {
    "prefix": "inf",
    "body": ["float(\"inf\")"],
    "description": ""
  },
  "dd": {
    "prefix": "dd",
    "body": ["from collections import defaultdict", "", "dd = defaultdict()"],
    "description": ""
  },
  "queue": {
    "prefix": "queue",
    "body": ["from collections import deque", "", "queue = deque([(0, 0)])"],
    "description": ""
  },
  "pqueue": {
    "prefix": "pqueue",
    "body": ["import heapq", "p_queue = [(0, 0)]"],
    "description": ""
  },
  "d4": {
    "prefix": "d4",
    "body": ["directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]"],
    "description": ""
  },
  "dn4": {
    "prefix": "dn4",
    "body": ["directions = {'R': (0, 1), 'L': (0, -1), 'D': (1, 0), 'U': (-1, 0)}"],
    "description": ""
  },
  "d8": {
    "prefix": "d8",
    "body": [
      "directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]"
    ],
    "description": ""
  },
  "comb": {
    "prefix": "comb",
    "body": ["from itertools import combinations", ""],
    "description": ""
  }
}
